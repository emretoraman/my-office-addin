{"version":3,"file":"commands.js","mappings":"YACA,IAAIA,EAAsB,G,6WC6B1B,WAAgCC,GAAhC,gGACQC,MAAMC,IAAN,4CAAU,WAAOC,GAAP,6FAERC,EAAQD,EAAQE,SAASC,WAAWC,sBACpCC,KAAK,wBAHG,SAIRL,EAAQM,OAJA,cAMVL,EAAMM,WAAWC,UACnBP,EAAMM,WAAWE,YAEjBR,EAAMM,WAAWG,UATL,SAYRV,EAAQM,OAZA,2CAAV,uDAcHK,OAAM,SAAUC,GACfC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,gBAAgBC,OACnCH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,eAlB1D,OAqBEtB,EAAKuB,YArBP,2C,wBC9BAxB,EAAoByB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,GDOxBC,OAAOC,SAAQ,eA+CfD,OAAOE,QAAQC,UAAU,oB,SAxBO,G,mCA2BP,oBAATC,KACVA,KACkB,oBAAXL,OACLA,YACkB,IAAXM,EAAAA,EACLA,EAAAA,OACAC,GAMRC,OAtDF,SAAgBC,GACd,IAAMC,EAAU,CACdC,KAAMV,OAAOW,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdf,OAAO3B,QAAQ2C,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUV,GAGxED,EAAMf,a","sources":["webpack:///webpack/bootstrap?","webpack:///./src/commands/commands.js?","webpack:///webpack/runtime/global?"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global global, Office, self, window */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\nfunction action(event) {\n  const message = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Be sure to indicate when the add-in command function is complete\n  event.completed();\n}\n\nasync function toggleProtection(args) {\n  await Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.load('protection/protected');\n    await context.sync();\n\n    if (sheet.protection.protected) {\n      sheet.protection.unprotect();\n    } else {\n      sheet.protection.protect();\n    }\n\n    await context.sync();\n  })\n    .catch(function (error) {\n      console.log(\"Error: \" + error);\n      if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n      }\n    });\n  args.completed();\n}\n\nOffice.actions.associate(\"toggleProtection\", toggleProtection);\n\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n      ? window\n      : typeof global !== \"undefined\"\n        ? global\n        : undefined;\n}\n\nconst g = getGlobal();\n\n// The add-in command functions need to be available in global scope\ng.action = action;\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["__webpack_require__","args","Excel","run","context","sheet","workbook","worksheets","getActiveWorksheet","load","sync","protection","protected","unprotect","protect","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","completed","g","globalThis","this","Function","e","window","Office","onReady","actions","associate","self","global","undefined","action","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","mailbox","item","notificationMessages","replaceAsync"],"sourceRoot":""}